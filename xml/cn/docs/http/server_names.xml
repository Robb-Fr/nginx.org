<!DOCTYPE article SYSTEM "../../../../dtd/article.dtd">

<article name="虚拟主机名"
         link="/cn/docs/http/server_names.html"
         lang="cn"
         author="Igor Sysoev"
         editor="Brian Mercer">


<section>

<para>

虚拟主机名使用<literal>server_name</literal>指令定义，并用于决定某个请求应由哪台虚拟主机处理。具体请参考《<link doc="request_processing.xml">nginx如何处理一个请求</link>》。虚拟主机名可以使用确切的名字，通配符，或者是正则表达式来定义：

<programlisting>
server {
    listen       80;
    server_name  nginx.org  www.nginx.org;
    ...
}

server {
    listen       80;
    server_name  *.nginx.org;
    ...
}

server {
    listen       80;
    server_name  mail.*;
    ...
}

server {
    listen       80;
    server_name  ~^(?&lt;user&gt;.+)\.nginx\.net$;
    ...
}
</programlisting>

nginx将以下面顺序检测名字：

<list type="enum">

<listitem>
确切的名字；
</listitem>

<listitem>
以星号起始的通配符名字：<literal>*.nginx.org</literal>；
</listitem>

<listitem>
以星号结束的通配符名字：<literal>mail.*</literal>；
</listitem>

<listitem>
正则表达式名字，按在配置文件中出现的顺序遍历。
</listitem>

</list>
一旦匹配成功，停止搜索。
</para>

</section>


<section id="wildcard_names"
        name="通配符名字">

<para>
通配符名字只可以在名字的起始处或结尾处包含一个星号，并且星号与其他字符之间用点分隔。所以，<literal>www.*.nginx.org</literal>和<literal>w*.nginx.org</literal>都是非法的。不过，上面的两个名字可以使用正则表达式描述：<literal>~^www\..+\.nginx\.org$</literal>和<literal>~^w.*\.nginx\.org$</literal>。星号可以匹配名字的多个节（各节都是以点号分隔的），比如<literal>*.nginx.org</literal>不仅匹配<literal>www.nginx.org</literal>，也匹配<literal>www.sub.nginx.org</literal>。
</para>

<para>
有一种形如<literal>.nginx.org</literal>的特殊通配符，它可以既匹配确切的名字<literal>nginx.org</literal>，又可以匹配一般的通配符名字<literal>*.nginx.org</literal>。
</para>

</section>


<section id="regex_names"
        name="正则表达式名字">

<para>
nginx使用兼容PCRE的正则表达式。为了使用正则表达式，虚拟主机名必须以波浪线“~”起始：

<programlisting>
server_name  ~^www\d+\.nginx\.net$;
</programlisting>

否则该名字会被认为是确切的名字，如果表达式含星号，则会被认为是通配符名字（很可能是一个非法的通配符名字）。不要忘记设置&ldquo;^&rdquo;和&ldquo;$&rdquo;锚点，语法上不是必须的，但是逻辑上是需要的。同时需要注意的是，域名中的点&ldquo;.&rdquo;需要用反斜线&ldquo;\&rdquo;转义。正则表达式中含有&ldquo;{&rdquo;和&ldquo;}&rdquo;，那么正则表达式需要被引用，如：

<programlisting>
server_name  "~^(?&lt;name&gt;\w\d<b>{</b>1,3<b>}</b>+)\.nginx\.net$";
</programlisting>

否则nginx就不能启动，错误提示是：

<programlisting>
directive "server_name" is not terminated by ";" in ...
</programlisting>

命名的正则表达式捕获组在后面可以作为变量使用：

<programlisting>
server {
    server_name   ~^(www\.)?(<b>?&lt;domain&gt;</b>.+)$;

    location / {
        root   /sites/<b>$domain</b>;
    }
}
</programlisting>

PCRE使用下面语法支持命名捕获组：

<table note="yes">

<tr>
<td><literal>?&lt;<value>name</value>&gt;</literal></td>
<td>从PCRE-7.0开始支持，兼容Perl 5.10语法</td>
</tr>

<tr>
<td><literal>?'<value>name</value>'</literal></td>
<td>从PCRE-7.0开始支持，兼容Perl 5.10语法</td>
</tr>

<tr>
<td><literal>?P&lt;<value>name</value>&gt;</literal></td>
<td>从PCRE-4.0开始支持，兼容Python语法</td>
</tr>

</table>

如果nginx不能启动，并显示错误信息：

<programlisting>
pcre_compile() failed: unrecognized character after (?&lt; in ...
</programlisting>

说明PCRE版本太旧，应该尝试使用<literal>?P&lt;name&gt;</literal>。捕获组也可以以数字方式引用：

<programlisting>
server {
    server_name   ~^(www\.)?(.+)$;

    location / {
        root   /sites/<b>$2</b>;
    }
}
</programlisting>

不过，这种用法只限于简单的情况（比如上面的例子），因为数字引用很容易被覆盖。
</para>


</section>


<section id="miscellaneous_names"
        name="其他类型的名字">

<para>
如果需要用一个非默认的虚拟主机处理请求头中不含&ldquo;Host&rdquo;字段的请求，需要指定一个空名字：

<programlisting>
server {
    listen       80;
    server_name  nginx.org  www.nginx.org  "";
    ...
}
</programlisting>
</para>

<para>
如果server块中没有定义<literal>server_name</literal>，nginx使用空名字作为虚拟主机名。
<note>
同样的情况下，nginx 0.8.48版本以下（含）使用<i>本地主机名</i>作为虚拟主机名。
</note>
</para>

<para>
如果使用IP地址而不是主机名来请求服务器，那么请求头的&ldquo;HOST&rdquo;字段包含的将是IP地址。可以将IP地址作为虚拟主机名来处理这种请求：

<programlisting>
server {
    listen       80;
    server_name  nginx.org
                 www.nginx.org
                 ""
                 <b>192.168.1.1</b>
                 ;
    ...
}
</programlisting>
</para>

<para>
在匹配所有的服务器的例子中，可以见到一个奇怪的名字&ldquo;_&rdquo;：

<programlisting>
server {
    listen       80  default_server;
    server_name  _;
    return       444;
}
</programlisting>

这没什么特别的，它只不过是成千上万的与真实的名字毫不相干的非法域名中的一个而已。当然，也可以使用&ldquo;--&rdquo;、&ldquo;!@#&rdquo;等等。
</para>

<para>
nginx直到0.6.25版本还支持一个特殊的名字&ldquo;*&rdquo;，这个名字一直被错误地理解成是一个匹配所有的名字。但它从来没有像匹配所有的名字，或者通配符那样工作过，而是用来支持一种功能，此功能现在已经改由<literal>server_name_in_redirect</literal>指令提供支持了。所以，现在这个特殊的名字&ldquo;*&rdquo;就过时了，应该使用<literal>server_name_in_redirect</literal>指令。需要注意的是，使用<literal>server_name</literal>指令无法描述匹配所有的名字或者默认服务器，需要使用<literal>listen</literal>指令的一个属性来完成这项工作。具体请参考《<link doc="request_processing.xml">nginx如何处理一个请求</link>》。可以定义两个服务器都监听*:80和*:8080端口，然后指定一个作为端口*:8080的默认服务器，另一个作为端口*:80的默认服务器：

<programlisting>
server {
    listen       80;
    listen       8080  default_server;
    server_name  nginx.net;
    ...
}

server {
    listen       80  default_server;
    listen       8080;
    server_name  nginx.org;
    ...
}
</programlisting>
</para>


</section>


<section id="optimization"
        name="优化">

<para>
确切名字和通配符名字存储在哈希表中。哈希表和监听端口关联，每个端口都最多关联到三张表：确切名字的哈希表，以星号起始的通配符名字的哈希表和以星号结束的通配符名字的哈希表。哈希表的尺寸在配置阶段进行了优化，可以以最小的CPU缓存命中失败来找到名字。nginx首先搜索确切名字的哈希表，如果没有找到，搜索以星号起始的通配符名字的哈希表，如果还是没有找到，继续搜索以星号结束的通配符名字的哈希表。因为名字是按照域名的节来搜索的，所以搜索通配符名字的哈希表比搜索确切名字的哈希表慢。注意<literal>.nginx.org</literal>存储在通配符名字的哈希表中，而不在确切名字的哈希表中。正则表达式是一个一个串行的测试，所以是最慢的，而且不可扩展。
</para>

<para>
鉴于以上原因，请尽可能使用确切的名字。举个例子，如果使用<literal>nginx.org</literal>和<literal>www.nginx.org</literal>来访问服务器是最频繁的，那么将它们明确的定义出来就更为有效：

<programlisting>
server {
    listen       80;
    server_name  nginx.org  www.nginx.org  *.nginx.org;
    ...
}
</programlisting>

下面这种方法相比更简单，但是效率也更低：

<programlisting>
server {
    listen       80;
    server_name  .nginx.org;
    ...
}
</programlisting>
</para>

<para>
如果定义了大量名字，或者定义了非常长的名字，那就需要在<i>http</i>配置块中调整<literal>server_names_hash_max_size</literal>和<literal>server_names_hash_bucket_size</literal>的值。<literal>server_names_hash_bucket_size</literal>的默认值可能是32，或者是64，或者是其他值，取决于CPU的缓存行的长度。如果这个值是32，那么定义&ldquo;too.long.server.name.nginx.org&rdquo;作为虚拟主机名就会失败，显示下面错误信息： 
<programlisting>
could not build the server_names_hash,
you should increase server_names_hash_bucket_size: 32
</programlisting>

出现了这种情况，那就需要将设置值扩大一倍：

<programlisting>
http {
    server_names_hash_bucket_size  64;
    ...
</programlisting>

如果定义了大量名字，得到了另外一个错误：

<programlisting>
could not build the server_names_hash,
you should increase either server_names_hash_max_size: 512
or server_names_hash_bucket_size: 32
</programlisting>

那么应该先尝试设置<literal>server_names_hash_max_size</literal>的值差不多等于名字列表的名字总量。如果还不能解决问题，或者服务器启动非常缓慢，再尝试提高<literal>server_names_hash_bucket_size</literal>的值。
</para>

<para>
如果只为一个监听端口配置了唯一的主机，那么nginx就完全不会测试虚拟主机名了（也不会建立那些名字哈希表）。不过，有一个例外，如果<literal>server_name</literal>是一个含有捕获组的正则表达式，这时nginx就不得不执行这个表达式以得到捕获组。
</para>

</section>


<section id="compatibility"
        name="兼容性">

<para>
<list type="bullet">

<listitem>
从0.8.48版本开始，默认的虚拟主机名是空名字&ldquo;&rdquo;。
</listitem>

<listitem>
从0.8.25版本开始，支持虚拟主机名中使用命名的正则表达式捕获组。
</listitem>

<listitem>
从0.7.40版本开始，支持虚拟主机名中使用正则表达式的捕获组。
</listitem>

<listitem>
从0.7.12版本开始，支持空名字&ldquo;&rdquo;。
</listitem>

<listitem>
从0.6.25版本开始，通配符和正则表达式名字可以作为第一个虚拟主机名。
</listitem>

<listitem>
从0.6.7版本开始，支持正则表达式的虚拟主机名。
</listitem>

<listitem>
从0.6.0版本开始，支持形如<literal>nginx.*</literal>的通配符名字。
</listitem>

<listitem>
从0.3.18版本开始，支持形如<literal>.nginx.org</literal>的特殊通配符名字。
</listitem>

<listitem>
从0.1.13版本开始，支持形如<literal>*.nginx.org</literal>的通配符名字。
</listitem>

</list>
</para>

</section>

</article>
